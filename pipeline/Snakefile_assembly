import os
import subprocess
import zipfile
import sys

print(sys.version)


#TODO list for assembly


configfile: "config_assembly.yaml"
#SHORTREADS = config["shortreads"]
#ALIGNERBINPATH = config["graphalignerfolder"]
GRAPHPATH = config["graphfolder"]
#SCRIPTPATH = config["graphalignerfolder"] + "scripts"
#BCALMPATH = config["bcalmpath"]
#CONVERTTOGFAPATH = config["bcalm_converttoGFApath"]
#BGREAT = config["bgreat"]
#EXTRACTFASTQ = config["extract_fastq"]
#inputDir = config["input_dir"]
#softClustDir = config["soft_clust_dir"]
#outputDir = "output"#config["output_dir"]
SSfastqDir = config["SS_fastq_dir"]
SSbamDir = config["SS_bam_dir"]
#VG = config["VG"]
#nodelens = config["node_lens"]
chroms = ["chr" + str(x) for x in range(1, 23)]# + ["chrX"]
#exportFasta = config["export_fasta_path"]
#computeSimpleBubble = config["simple_bubble_detection_path"]
#getSNVbubbles = config["get_snv_bubbles_path"]
#getRevcompFree = config["get_rev_comp_free_path"]
#clustersizes = config["cluster_sizes"]
phasedSSvcfDir = config["phased_vcf_dir"]
whatshap = config["whatshap"]
PBbamDir = config["pb_bam_dir"]
minPBlen = config["min_pb_len"]
#platinumVCFdir = config["platinum_vcf_dir"]
N = config["Nchunks"]
l = len(str(N))
chunkID = ['0'*(l-len(str(i)))+str(i) for i in range(N)]
#chunkID = ['000']
sample = config["sample"]
w = config["w"]
#w="-default"
kMinimap = config["k_minimap"]
fMinimap = config["f"]
z = config["z"]
outputfolder    = "SaaRclust_results"
haplotypes = ['H1', 'H2']
hifiasm = config["hifiasm"]

add_untagged = "--add-untagged" if config["whatshap_split_add_untagged"] else ""

#####################################################################

chrom_sizes = \
    {"chr1":	"248m", \
    "chr2":	"242m", \
    "chr3":	"198m", \
    "chr4":	"190m", \
    "chr5":	"181m", \
    "chr6":	"171m", \
    "chr7":	"159m", \
    "chr8":	"145m", \
    "chr9":	"138m", \
    "chr10":"133m", \
    "chr11":"135m", \
    "chr12":"133m", \
    "chr13":"114m", \
    "chr14":"107m", \
    "chr15":"102m", \
    "chr16":"90m", \
    "chr17":"83m", \
    "chr18":"80m", \
    "chr19":"59m", \
    "chr20":"64m", \
    "chr21":"47m", \
    "chr22":"51m", \
    "chrX": "156m"}

###### getting clusters
clust_pairs_file = "aligns_k" + str(kMinimap) + "_w" + str(w) + "_f" + str(fMinimap) + "_z" + str(z) + "/SaaRclust_results_" + sample + "/clust_partners.txt"
rename_script = open("assembly_min_2_bubbles/rename_fastq.sh", 'w')
clusters = []
clust_pairs = []

clust_pair_sizes = {}

with open(clust_pairs_file) as f:
	next(f)
	for line in f:
		if line=="":
			continue

		sp = line.split()
		chr, clust1, clust2 = sp[0], sp[1], sp[2]
		chr = chr.split('_')[0]
		chrom_size = chrom_sizes[chr]
		chr = chr.split('chr')[1]
		
		if chr=="X":
			chr="23"
		min_clust, max_clust = min(clust1, clust2), max(clust1, clust2)
		clust_pair = min_clust + '_' + max_clust
		
		clust_pair_sizes[clust_pair] = chrom_size
		
		clusters.append(clust1)
		if clust1 == min_clust:
			clust_pairs.append(clust_pair)
			rename_script.writelines('mv splitted_fastq_clust_pair/'+clust_pair+'_H1_iteration2_pb_phase_kMinimap15_w1_f0.1_z500_k63_a3_l23_HG00733.fastq.gz splitted_fastq_renamed/HG00733_mgh_pbsq2-ccs_1000.h1.cluster'+chr+'.fastq.gz\n')
			rename_script.writelines('mv splitted_fastq_clust_pair/'+clust_pair+'_H2_iteration2_pb_phase_kMinimap15_w1_f0.1_z500_k63_a3_l23_HG00733.fastq.gz splitted_fastq_renamed/HG00733_mgh_pbsq2-ccs_1000.h2.cluster'+chr+'.fastq.gz\n')

print('clusters =', clusters)
print('clust_pairs =', clust_pairs)
print('len(clust_pairs) =', len(clust_pairs))
print('clust_pair_sizes =', clust_pair_sizes)




#####################################################################

wildcard_constraints:
	clust = "[V]\d+",


rule all:
	input:
		expand("aligns_k{kMinimap}_w{w}_f{f}_z{z}/"+outputfolder+"_{sample}/Clusters/split/haplo_split_min_2_bubbles_k{k}_a{a}_l{l}/{sample}.{clust_pair}.{haplo}.fastq.gz", k=config["k"], a = config["kmer_abundance"], l = config["l"], kMinimap=kMinimap, w=w, f=fMinimap, z=z, sample=sample, clust_pair=clust_pairs, haplo=haplotypes),
		expand("aligns_k{kMinimap}_w{w}_f{f}_z{z}/"+outputfolder+"_{sample}/Clusters/split/haplo_split_min_2_bubbles_k{k}_a{a}_l{l}/hifiasm/{clust_pair}.{haplo}.p_ctg.fa", k=config["k"], a = config["kmer_abundance"], l = config["l"], kMinimap=kMinimap, w=w, f=fMinimap, z=z, sample=sample, clust_pair=clust_pairs, haplo=haplotypes),
		expand("aligns_k{kMinimap}_w{w}_f{f}_z{z}/"+outputfolder+"_{sample}/Clusters/split/hifiasm/{clust_pair}.p_ctg.fa", k=config["k"], a = config["kmer_abundance"], l = config["l"], kMinimap=kMinimap, w=w, f=fMinimap, z=z, sample=sample, clust_pair=clust_pairs),
		expand("aligns_k{kMinimap}_w{w}_f{f}_z{z}/"+outputfolder+"_{sample}/Clusters/split/haplo_split_min_2_bubbles_k{k}_a{a}_l{l}/canu/{clust_pair}.{haplo}/asm.contigs.fasta", k=config["k"], a = config["kmer_abundance"], l = config["l"], kMinimap=kMinimap, w=w, f=fMinimap, z=z, sample=sample, clust_pair=clust_pairs, haplo=haplotypes)



rule whatshap_split:
	input:
		fastq="aligns_k{kMinimap}_w{w}_f{f}_z{z}/"+outputfolder+"_{sample}/Clusters/split/{sample}.{clust_pair}.fastq.gz",
		haplo_list="haploclust_iteration2/pb_phase_cluster{clust_pair}_k{kMinimap}_w{w}_f{f}_z{z}_k{k}_a{a}_l{l}_{sample}.data"
	output:
		splitted=expand("aligns_k{{kMinimap}}_w{{w}}_f{{f}}_z{{z}}/"+outputfolder+"_{{sample}}/Clusters/split/haplo_split_min_2_bubbles_k{{k}}_a{{a}}_l{{l}}/{{sample}}.{{clust_pair}}.{haplo}.fastq.gz", haplo=haplotypes)
	log: "log/whatshap_split_{clust_pair}_iteration2_pb_phase_kMinimap{kMinimap}_w{w}_f{f}_z{z}_k{k}_a{a}_l{l}_{sample}.log"
	shell: "(time {whatshap} split {input.fastq} {input.haplo_list} --output-h1 {output[0]} --output-h2 {output[1]} --discard-unknown-reads {add_untagged} --pigz) > {log} 2>&1"


rule hifiasm_per_chrom:
	input: "aligns_k{kMinimap}_w{w}_f{f}_z{z}/"+outputfolder+"_{sample}/Clusters/split/{sample}.{clust_pair}.fastq.gz"
	output:
		gfa="aligns_k{kMinimap}_w{w}_f{f}_z{z}/"+outputfolder+"_{sample}/Clusters/split/hifiasm/{clust_pair}.p_ctg.gfa",
		fa="aligns_k{kMinimap}_w{w}_f{f}_z{z}/"+outputfolder+"_{sample}/Clusters/split/hifiasm/{clust_pair}.p_ctg.fa",
	threads: 2
	log: "log/hifiasm_k{kMinimap}_w{w}_f{f}_z{z}_{sample}_{clust_pair}.log"
	shell:
		'''
		DIR=$(dirname {output.gfa}) &&
		(time {hifiasm} -o $DIR/{wildcards.clust_pair} -t {threads} {input} &&
		time grep S {output.gfa} | awk '{{print \">\"$2\"\\n\"$3}}' > {output.fa}) > {log} 2<&1
		'''

rule hifiasm:
	input: "aligns_k{kMinimap}_w{w}_f{f}_z{z}/"+outputfolder+"_{sample}/Clusters/split/haplo_split_min_2_bubbles_k{k}_a{a}_l{l}/{sample}.{clust_pair}.{haplo}.fastq.gz"
	output:
		gfa="aligns_k{kMinimap}_w{w}_f{f}_z{z}/"+outputfolder+"_{sample}/Clusters/split/haplo_split_min_2_bubbles_k{k}_a{a}_l{l}/hifiasm/{clust_pair}.{haplo}.p_ctg.gfa",
		fa="aligns_k{kMinimap}_w{w}_f{f}_z{z}/"+outputfolder+"_{sample}/Clusters/split/haplo_split_min_2_bubbles_k{k}_a{a}_l{l}/hifiasm/{clust_pair}.{haplo}.p_ctg.fa"
	threads: 1
	log: "log/hifiasm_k{kMinimap}_w{w}_f{f}_z{z}_{sample}_k{k}_a{a}_l{l}_{clust_pair}.{haplo}.log"
	shell:
		'''
		DIR=$(dirname {output.gfa}) &&
		(time {hifiasm} -o $DIR/{wildcards.clust_pair}.{wildcards.haplo} -t {threads} {input} &&
		time grep S {output.gfa} | awk '{{print \">\"$2\"\\n\"$3}}' > {output.fa}) > {log} 2<&1
		'''

#rule get_hifiasm_contigs:
#	input:
#		"aligns_k{kMinimap}_w{w}_f{f}_z{z}/"+outputfolder+"_{sample}/Clusters/split/haplo_split_min_2_bubbles_k{k}_a{a}_l{l}/hifiasm/{clust_pair}.{haplo}.p_ctg.gfa"
#	output:
#		"aligns_k{kMinimap}_w{w}_f{f}_z{z}/"+outputfolder+"_{sample}/Clusters/split/haplo_split_min_2_bubbles_k{k}_a{a}_l{l}/hifiasm/{clust_pair}.{haplo}.p_ctg.fa"
#	log: "log/get_hifiasm_contigs_k{kMinimap}_w{w}_f{f}_z{z}_{sample}_k{k}_a{a}_l{l}_{clust_pair}.{haplo}.log"
#	shell:
#		"(time grep S {input} | awk '{{print \">\"$2\"\\n\"$3}}' > {output}) > {log} 2>&1"


rule flye_assembly:
	input: "aligns_k{kMinimap}_w{w}_f{f}_z{z}/"+outputfolder+"_{sample}/Clusters/split/haplo_split_min_2_bubbles_k{k}_a{a}_l{l}/{sample}.{clust_pair}.{haplo}.fastq.gz"
	output: "aligns_k{kMinimap}_w{w}_f{f}_z{z}/"+outputfolder+"_{sample}/Clusters/split/haplo_split_min_2_bubbles_k{k}_a{a}_l{l}/flye_assembly/{sample}.{clust_pair}.{haplo}.fasta"
	params:
		output_dir = lambda wc: ("aligns_k{}_w{}_f{}_z{}/"+outputfolder+"_{}/Clusters/split/haplo_split_min_2_bubbles_k{}_a{}_l{}/flye_assembly").format(wc.kMinimap, wc.w, wc.f, wc.z, wc.sample, wc.k, wc.a, wc.l),
		chrom_size = lambda wc: clust_pair_sizes[wc.clust_pair]
	threads: 14
	log: "log/{clust_pair}_{haplo}_kMinimap{kMinimap}_w{w}_f{f}_z{z}_k{k}_a{a}_l{l}_{sample}_flye_assembly.log"
	shell:
		'''
		(time flye --pacbio-hifi {input} --out-dir {params.output_dir} --genome-size {params.chrom_size} --threads {threads}) > {log} 2>&1
		'''

rule canu_assembly:
	input: "aligns_k{kMinimap}_w{w}_f{f}_z{z}/"+outputfolder+"_{sample}/Clusters/split/haplo_split_min_2_bubbles_k{k}_a{a}_l{l}/{sample}.{clust_pair}.{haplo}.fastq.gz"
	output: "aligns_k{kMinimap}_w{w}_f{f}_z{z}/"+outputfolder+"_{sample}/Clusters/split/haplo_split_min_2_bubbles_k{k}_a{a}_l{l}/canu/{clust_pair}.{haplo}/asm.contigs.fasta"
	params:
		chrom_size = lambda wc: clust_pair_sizes[wc.clust_pair]
	#threads: 2
	log: "log/{clust_pair}_{haplo}_kMinimap{kMinimap}_w{w}_f{f}_z{z}_k{k}_a{a}_l{l}_{sample}_canu_assembly.log"
	shell:
		'''
		DIR=$(dirname {output}) &&
		(time canu -d $DIR -p asm genomeSize={params.chrom_size} -pacbio-hifi {input}) > {log} 2<&1 #maxThreads={threads}
		'''

