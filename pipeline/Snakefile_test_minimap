import os
import subprocess

configfile: "configminimap_new.yaml"
SHORTREADS = config["shortreads"]
ALIGNERBINPATH = config["graphalignerfolder"]
GRAPHPATH = config["graphfolder"]
SCRIPTPATH = config["graphalignerfolder"] + "scripts"
BCALMPATH = config["bcalmpath"]
CONVERTTOGFAPATH = config["bcalm_converttoGFApath"]
BGREAT = config["bgreat"]
EXTRACTFASTQ = config["extract_fastq"]
inputDir = config["input_dir"]
softClustDir = config["soft_clust_dir"]
outputDir = "output"#config["output_dir"]
SSfastqDir = config["SS_fastq_dir"]
SSbamDir = config["SS_bam_dir"]
VG = config["VG"]
nodelens = config["node_lens"]
chroms = ["chr" + str(x) for x in range(1, 23)]# + ["chrX"]
#exportFasta = config["export_fasta_path"]
#computeSimpleBubble = config["simple_bubble_detection_path"]
#getSNVbubbles = config["get_snv_bubbles_path"]
#getRevcompFree = config["get_rev_comp_free_path"]
clustersizes = config["cluster_sizes"]
phasedSSvcfDir = config["phased_SSbased_vcf_dir"]
whatshap = config["whatshap"]
PBbamDir = config["pb_bam_dir"]
minPBlen = config["min_pb_len"]
platinumVCFdir = config["platinum_vcf_dir"]
#N = config["Nchunks"]
N=100
l = len(str(N))
#chunkID = ['0'*(l-len(str(i)))+str(i) for i in range(N+1)]
chunkID = ['000']#, '001', '002', '003', '004', '005', '006', '007', '008', '009']
sample = config["sample"]
w = config["w"]
#w="-default"
kMinimap = config["k_minimap"]
fMinimap = config["f"]
z = config["z"]
outputfolder    = "SaaRclust_results"
numClustersHard = config["numClustersHard"]
numClustersSoft = config["numClustersSoft"]
EMiter          = config["EMiter"]
alpha           = config["alpha"]
minLib          = config["minLib"]
upperQ          = config["upperQ"]
logLth          = config["logLth"]
theta_constrain = config["theta_constrain"]
log_scale  	= config["log_scale"]
numAlignments   = config["numAlignments"]


minimapHeader = "SSreadNames\\tSSreadLen\\tQueryCoordStart\\tQueryCoordend\\tstrand\\tPBreadNames\\tPBreadLen\\tTargetCoordStart\\tTargetCoordend\\tNumResidueMatches\\tMatchedBasesWithGaps\\tcigar"
minimapExtendedHeader = "SSreadNames\\tSSlibNames\\tSSflag\\tSSchrom\\tSSpos\\tSSreadLen\\tQueryCoordStart\\tQueryCoordend\\tstrand\\tPBreadNames\\tPBflag\\tPBchrom\\tPBpos\\tPBreadLen\\tTargetCoordStart\\tTargetCoordend\\tNumResidueMatches\\tMatchedBasesWithGaps\\tcigar"

print(minimapExtendedHeader)

libs, = glob_wildcards(SSfastqDir+"/{lib}_1.fastq.gz")
PBbamfiles,=glob_wildcards(PBbamDir+"/{bamfile}.bam")
print(libs)
print(SSfastqDir)


###############################################
#######		python functions	#######
###############################################

#def getclustersize(cl, filename):
#	return subprocess.getoutput("awk \'$3==\"" + cl + "\" {print $2}\' " + filename)
#
#print("getclustersize(V23) = ", getclustersize('V23', clustersizes))
		

###############################################

clusters = ["V"+str(i) for i in range(1, 48)]
directions = ["watson", "crick"]
haplotypes = [1,2]
haplotype_tags = ["HP:i:1", "HP:i:2"]


wildcard_constraints:
	graphname = "k\d+_a\d+_u\d+",
	k = "\d+",
	a = "\d+",
	u = "\d+",
	l = "\d+",
	longnodesize = "\d+",
	overlapsize = "\d+",
	longreads = "[^_]+",
	shortreads = "[^_]+",
	clust = "[V]\d+",
	chunks = "[0-9]+",
	sample=sample,


rule all:
	input:
		#expand("aligns_k{kMinimap}_w{w}_f{f}_z{z}/{sample}_chunk{chunks}.maf.gz", kMinimap=kMinimap, w=w, f=fMinimap, z=z, sample=sample, chunks=chunkID),
		#expand("aligns_k{kMinimap}_w{w}_f{f}_z{z}/"+outputfolder+"_{sample}/Clusters/hardClusteringResults_{numClustersHard}clusters.RData", kMinimap=kMinimap, w=w, f=fMinimap, z=z, sample=sample, numClustersHard=numClustersHard),
		#expand("aligns_k{kMinimap}_w{w}_f{f}_z{z}/{sample}_chunk{chunks}_evaluation.txt", kMinimap=kMinimap, w=w, f=fMinimap, z=z, sample=sample, chunks=chunkID),
		expand("minimap_evaluation_{sample}_chunk{chunks}.txt", sample=sample, chunks=chunkID),
		#expand("aligns_k{kMinimap}_w{w}_f{f}_z{z}/"+outputfolder+"_{sample}/Clusters/{sample}_chunk{chunks}_clusters.RData", kMinimap=kMinimap, w=w, f=fMinimap, z=z, sample=sample, chunks=chunkID),
		#expand("aligns_k{kMinimap}_w{w}_f{f}_z{z}/"+outputfolder+"_{sample}/saarclust_accuracy_plot.pdf", kMinimap=kMinimap, w=w, f=fMinimap, z=z, sample=sample),
		#expand("aligns_k{kMinimap}_w{w}_f{f}_z{z}/PacBio_haplo_edit_dist_chunk{chunks}_k{k}_a{a}_l{l}_{sample}.data", k=config["k"], a = config["kmer_abundance"], l = config["l"], kMinimap=kMinimap, w=w, f=fMinimap, z=z, sample=sample, chunks=chunkID),

###############################################################################
##############		merging read pairs with PEAR		###############
###############################################################################

rule pear_merge_mates:
	input:
		fq1=SSfastqDir+"/{lib}_1.fastq.gz",
		fq2=SSfastqDir+"/{lib}_2.fastq.gz",
        
	output:
		SSfastqDir+"/merged/{lib}.assembled.fastq",
		SSfastqDir+"/merged/{lib}.discarded.fastq",
		SSfastqDir+"/merged/{lib}.unassembled.forward.fastq",
		SSfastqDir+"/merged/{lib}.unassembled.reverse.fastq"
        
	log: "log/pear_merge_mates_{lib}.log"
        
	shell: "(time pear -f {input.fq1} -r {input.fq2} -t 101 -o {SSfastqDir}/merged/{wildcards.lib}) > {log} 2>&1"
	

rule concat_merged_with_first_unmerged:
	input:
		SSfastqDir+"/merged/{lib}.assembled.fastq",
		SSfastqDir+"/merged/{lib}.unassembled.forward.fastq",
	output: temp(SSfastqDir+"/merged/{lib}.combined.fastq")
	log: "log/concat_merged_with_first_unmerged_{lib}.log"
	shell: "(time cat {input} > {output}) > {log} 2>&1"

###############################################################################
##############	     Adding ground true info to SS read names	###############
###############################################################################

rule bwa_map_SS_to_ref:
	input:
		ref=config["reference"],
		amb=config["reference"] + ".amb",
		ann=config["reference"] + ".ann",
		bwt=config["reference"] + ".bwt",
		pac=config["reference"] + ".pac",
		sa= config["reference"] + ".sa",
		ss= temp(SSfastqDir+"/merged/{lib}.combined.fastq")
	output: SSbamDir+"/{lib}.bam"
	threads: 8
	log: "log/bwa_map_SS_to_ref_{lib}.log"
	shell: "(time bwa mem -t {threads} {input.ref} {input.ss} | samtools view -Sb - > {output}) > {log} 2>&1"

rule sort_SS_bam:
	input: SSbamDir+"/{lib}.bam"
	output: SSbamDir+"/{lib}.sorted.bam"
	log: "log/sort_SS_bam_{lib}.log"
	shell: "(time samtools sort -o {output} {input}) > {log} 2>&1"

rule export_SS_fasta_from_bam:
	input: SSbamDir+"/{lib}.bam"
	output: SSfastqDir+"/merged/{lib}.combined.withmapinfo.fasta"
	log: "log/export_SS_fasta_from_bam_{lib}.log"
	shell:
		'''
		(time bioawk -c sam '{{s=$seq; if(and($flag, 16)) {{s=revcomp($seq)}} print \">\" $qname \"_{wildcards.lib}_\" $flag \"_\" $rname \"_\" $pos \"\\n\" s}}' \
		<(samtools view -F 4 {input}) > {output}) > {log} 2>&1
		'''


###############################################################################
##############	     Adding ground true info to SS read names	###############
###############################################################################

#TODO: remove the first two rules (they are going to be generated by Snakefile_prepare_input file)

rule export_pacbio_reads:
	input: PBbamDir+"/{bamfile}.bam"
	output: expand(PBbamDir+"/{sample}_{{bamfile}}.fasta", sample=sample)
	log: "log/export_pacbio_reads_{bamfile}.log"
	shell:
		'''
		(time bioawk -c sam '{{s=$seq; if(and($flag, 16)) {{s=revcomp($seq)}} if(length(s)>{minPBlen})print \">\" $qname \"_\" $flag \"_\" $rname \"_\" $pos \"\\n\" s}}' \
		<(samtools view -F 260 {input} | awk '!seen[$1]++') > {output}) > {log} 2>&1
		'''

rule concat_all_fasta:
	input: expand(PBbamDir+"/{{sample}}_{bamfile}.fasta", bamfile=PBbamfiles)
	output: temp(PBbamDir+"/{sample}.fasta")
	log: "log/concat_all_fasta_{sample}.log"
	shell: "(time cat {input} > {output}) > {log} 2>&1"

rule split_fasta_file:
	input: temp(expand(PBbamDir+"/{sample}.fasta", sample=sample))
	output: expand(PBbamDir+"/{sample}.{chunks}.fasta", chunks=chunkID, sample=sample)
	log: "log/split_fasta_file.log"
	shell: "(time pyfasta split -n {N} {input}) > {log} 2>&1"
	



###############################################################################
##############	     minimap aliging SS reads to PB reads	###############
###############################################################################


rule minimap2_align_SS_to_PB:
	input:
		pb_reads=PBbamDir+"/{sample}.{chunks}.fasta",
		ss_reads=expand(SSfastqDir+"/merged/{lib}.combined.withmapinfo.fasta", lib=libs)
	output: temp("aligns_k{kMinimap}_w{w}_f{f}_z{z}/{sample}_chunk{chunks}_temp.paf.gz")
	threads: 6
	log: "log/minimap_align_chunks_{sample}_chunk{chunks}_{kMinimap}_w{w}_f{f}_z{z}.log"
	shell: "(time minimap2 -c -t{threads} -k{wildcards.kMinimap} -w{wildcards.w} -f{wildcards.f} -z{wildcards.z} {input.pb_reads} {input.ss_reads} | gzip -c > {output}) > {log} 2>&1"
	#shell: "(time minimap2 -c -t{threads} -k{wildcards.kMinimap} -f{wildcards.f} -z{wildcards.z} {input.pb_reads} {input.ss_reads} | gzip -c > {output}) > {log} 2>&1"


# remove SS read names with unknown chromosomes and output columns 1 through 11 and the last column (cigar) of the minimap output
rule process_minimap_output:
	input: temp("aligns_k{kMinimap}_w{w}_f{f}_z{z}/{sample}_chunk{chunks}_temp.paf.gz")
	output: temp("aligns_k{kMinimap}_w{w}_f{f}_z{z}/{sample}_chunk{chunks}.paf.gz")
	log:"log/process_minimap_output_k{kMinimap}_w{w}_f{f}_z{z}_{sample}_chunk{chunks}.log"
	shell:
		'''
		(time cat <(echo -e \"{minimapHeader}\") <(zcat {input} | awk '$1~/chr([0-9]+|X)_[0-9]+$/{{print $1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$NF}}') | gzip -c > {output}) > {log} 2>&1
		'''


rule extend_minimap_columns_by_ground_truth_info:
	input:  temp("aligns_k{kMinimap}_w{w}_f{f}_z{z}/{sample}_chunk{chunks}.paf.gz")
	output: "aligns_k{kMinimap}_w{w}_f{f}_z{z}/{sample}_chunk{chunks}.maf.gz"
	log: "log/extend_minimap_columns_by_ground_truth_info_k{kMinimap}_w{w}_f{f}_z{z}_{sample}_chunk{chunks}.log"
	shell:
		'''
		(time cat <(echo -e \"{minimapExtendedHeader}\") <(zcat {input} | tail -n +2 | gawk 'match($1, /(.*)_(.*)_(.*)_(.*)_(.*)/, ss) match($6, /(.*)_(.*)_(.*)_(.*)/, pb) \
		{{print ss[1] \"\t\" ss[2] \"\t\" ss[3] \"\t\" ss[4] \"\t\" ss[5] \
		\"\t\" $2 \"\t\" $3 \"\t\" $4 \"\t\" $5 \"\t\" \
		pb[1] \"\t\" pb[2] \"\t\" pb[3] \"\t\" pb[4] \"\t\" \
		$7 \"\t\" $8 \"\t\" $9 \"\t\" $10 \"\t\" $11 \"\t\" $12}}') | gzip -c > {output}) > {log} 2>&1
		'''


###############################################################################
##############	   	  minimap evaluation			###############
###############################################################################



rule intersect_pb_ss_bams:
	input:
		pb=PBbamDir+"/{sample}.{chunks}.sorted.bam",
		#ss=config["SS_bam_dir"]+"/{lib}_srt_dedup.bam"
		ss=SSbamDir+"/{lib}.sorted.bam"
	output: PBbamDir+"/intersect_with_ss_bams/intersect_{sample}.{lib}.{chunks}.bed"
	log: "log/intersect_pb_ss_bams_{sample}_{lib}_{chunks}.log"
	shell: "(time bedtools intersect -bed -a <(samtools view -F 2304 -Sb {input.pb}) -b {input.ss} -wa -wb > {output}) > {log} 2>&1"


rule evaluate_minimap:
	input: 
		minimap="aligns_k{kMinimap}_w{w}_f{f}_z{z}/{sample}_chunk{chunks}.maf.gz",
		#pb_ss_intersect=expand(PBbamDir+"/intersect_with_ss_bams/intersect_{{sample}}.{lib}.{{chunks}}.bed", lib=libs),
		log    ="log/minimap_align_chunks_{sample}_chunk{chunks}_{kMinimap}_w{w}_f{f}_z{z}.log"
	output: "aligns_k{kMinimap}_w{w}_f{f}_z{z}/{sample}_chunk{chunks}_evaluation.txt"
	params:
		overlap=0.8
	script: "utils/evaluate_minimap.py"


rule concat_minimap_evaluation_results:
	input: 
		minimap_eval=expand("aligns_k{kMinimap}_w{w}_f{f}_z{z}/{{sample}}_chunk{{chunks}}_evaluation.txt", kMinimap=kMinimap, w=w, f=fMinimap, z=z),
		pb_ss_intersect=expand(PBbamDir+"/intersect_with_ss_bams/intersect_{{sample}}.{lib}.{{chunks}}.bed", lib=libs)
	output:"minimap_evaluation_{sample}_chunk{chunks}.txt"
	shell:
		'''
		declare -i l=0
		for g in {input.pb_ss_intersect}
		do
		l=$((l+$(awk \'{{print $4, $16}}\' $g | sort | uniq | wc -l)))
		done
		echo \"total number of overlaps = \" $l > {output}
		for f in {input.minimap_eval}
		do
			echo $f \"\n\" >> {output}
			cat $f >> {output}
			echo \"\n\" >> {output}
		done
		'''
